version: '3.8'

services:
  # Inferno Dashboard
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - INFERNO_API_URL=http://inferno-backend:8080
      - INFERNO_WS_URL=ws://inferno-backend:8080
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
    depends_on:
      - inferno-backend
    restart: unless-stopped
    networks:
      - inferno-network
    volumes:
      - dashboard-data:/app/data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Inferno Backend (placeholder - replace with actual backend configuration)
  inferno-backend:
    image: inferno:latest
    ports:
      - "8080:8080"
    environment:
      - INFERNO_LOG_LEVEL=info
      - INFERNO_MODELS_DIR=/models
      - INFERNO_CACHE_DIR=/cache
    volumes:
      - models-data:/models
      - cache-data:/cache
      - backend-logs:/logs
    restart: unless-stopped
    networks:
      - inferno-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - inferno-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - inferno-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - inferno-network

volumes:
  dashboard-data:
  models-data:
  cache-data:
  backend-logs:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  inferno-network:
    driver: bridge