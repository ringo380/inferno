name: DMG Packaging

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to create DMG for'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build-x86_64:
    name: Build x86_64 Binary
    runs-on: macos-latest
    timeout-minutes: 25
    permissions:
      contents: write
    outputs:
      binary-uploaded: ${{ steps.upload.outputs.uploaded }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get release tag
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
          cache: true

      - name: Build x86_64 binary
        run: |
          export RUSTFLAGS="-A warnings"
          export CARGO_INCREMENTAL=1
          echo "Building for x86_64-apple-darwin..."
          cargo build --release --target x86_64-apple-darwin --bin inferno

      - name: Upload x86_64 binary
        id: upload
        run: |
          cp target/x86_64-apple-darwin/release/inferno inferno-macos-x86_64
          chmod +x inferno-macos-x86_64
          file inferno-macos-x86_64

          # Upload as artifact for DMG creation
          echo "uploaded=true" >> $GITHUB_OUTPUT

      - name: Upload x86_64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: inferno-x86_64
          path: inferno-macos-x86_64
          retention-days: 1

  build-aarch64:
    name: Build ARM64 Binary
    runs-on: macos-latest
    timeout-minutes: 35
    permissions:
      contents: write
    outputs:
      binary-uploaded: ${{ steps.upload.outputs.uploaded }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get release tag
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          cache: true

      - name: Build aarch64 binary
        run: |
          export RUSTFLAGS="-A warnings"
          export CARGO_INCREMENTAL=1
          echo "Building for aarch64-apple-darwin..."
          cargo build --release --target aarch64-apple-darwin --bin inferno

      - name: Upload arm64 binary
        id: upload
        run: |
          cp target/aarch64-apple-darwin/release/inferno inferno-macos-arm64
          chmod +x inferno-macos-arm64
          file inferno-macos-arm64
          echo "uploaded=true" >> $GITHUB_OUTPUT

      - name: Upload arm64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: inferno-arm64
          path: inferno-macos-arm64
          retention-days: 1

  create-dmg:
    name: Create macOS DMG
    runs-on: macos-latest
    needs: [build-x86_64, build-aarch64]
    timeout-minutes: 15  # DMG creation should be fast
    permissions:
      contents: write  # Need write permission to upload release assets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get release tag
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          fi


      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: inferno-*
          path: artifacts/
          merge-multiple: false

      - name: Prepare binaries from artifacts
        run: |
          # Create directories for binaries
          mkdir -p binaries/x86_64
          mkdir -p binaries/arm64

          # Copy downloaded artifacts to proper locations
          echo "Setting up binaries from build artifacts..."
          cp artifacts/inferno-x86_64/inferno-macos-x86_64 binaries/x86_64/inferno
          cp artifacts/inferno-arm64/inferno-macos-arm64 binaries/arm64/inferno

          # Make binaries executable
          chmod +x binaries/x86_64/inferno
          chmod +x binaries/arm64/inferno

          # Verify builds
          echo "Verifying binaries:"
          file binaries/x86_64/inferno
          file binaries/arm64/inferno

          # Test that they work
          echo "Testing binaries:"
          binaries/x86_64/inferno --version || echo "x86_64 binary test failed"
          binaries/arm64/inferno --version || echo "arm64 binary test failed"

          # Note: Individual binaries are NOT uploaded to release
          # Only the universal DMG will be provided to users
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create universal binary
        run: |
          mkdir -p universal
          lipo -create \
            binaries/x86_64/inferno \
            binaries/arm64/inferno \
            -output universal/inferno

          # Verify universal binary
          file universal/inferno
          lipo -info universal/inferno

      - name: Create app bundle with icon
        run: |
          # Create app bundle structure
          mkdir -p "Inferno.app/Contents/MacOS"
          mkdir -p "Inferno.app/Contents/Resources"

          # Copy universal binary
          cp universal/inferno "Inferno.app/Contents/MacOS/"

          # Make binary executable
          chmod +x "Inferno.app/Contents/MacOS/inferno"

          # Copy the icon FIRST before creating Info.plist
          echo "Copying Inferno icon to app bundle..."
          if [ -f "icons/icon.icns" ]; then
            cp icons/icon.icns "Inferno.app/Contents/Resources/icon.icns"
            echo "Icon copied successfully to Resources/icon.icns"
            ls -la "Inferno.app/Contents/Resources/"
          else
            echo "ERROR: icon.icns not found in icons/ directory"
            ls -la icons/
            exit 1
          fi

          # Create Info.plist with CFBundleIconFile already included
          cat > "Inferno.app/Contents/Info.plist" << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>inferno</string>
              <key>CFBundleIconFile</key>
              <string>icon</string>
              <key>CFBundleIdentifier</key>
              <string>com.inferno.ai.runner</string>
              <key>CFBundleName</key>
              <string>Inferno</string>
              <key>CFBundleDisplayName</key>
              <string>Inferno AI/ML Runner</string>
              <key>CFBundleVersion</key>
              <string>${{ steps.get_tag.outputs.tag }}</string>
              <key>CFBundleShortVersionString</key>
              <string>${{ steps.get_tag.outputs.tag }}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.15</string>
              <key>LSApplicationCategoryType</key>
              <string>public.app-category.developer-tools</string>
              <key>NSHighResolutionCapable</key>
              <true/>
              <key>NSRequiresAquaSystemAppearance</key>
              <false/>
              <key>LSArchitecturePriority</key>
              <array>
                  <string>arm64</string>
                  <string>x86_64</string>
              </array>
              <key>NSHumanReadableCopyright</key>
              <string>Copyright Â© 2024 Inferno Developers. All rights reserved.</string>
              <key>LSApplicationSecondaryCategoryType</key>
              <string>public.app-category.utilities</string>
              <key>CFBundleDocumentTypes</key>
              <array>
                  <dict>
                      <key>CFBundleTypeExtensions</key>
                      <array>
                          <string>gguf</string>
                      </array>
                      <key>CFBundleTypeName</key>
                      <string>GGUF Model File</string>
                      <key>CFBundleTypeRole</key>
                      <string>Viewer</string>
                      <key>LSTypeIsPackage</key>
                      <false/>
                  </dict>
                  <dict>
                      <key>CFBundleTypeExtensions</key>
                      <array>
                          <string>onnx</string>
                      </array>
                      <key>CFBundleTypeName</key>
                      <string>ONNX Model File</string>
                      <key>CFBundleTypeRole</key>
                      <string>Viewer</string>
                      <key>LSTypeIsPackage</key>
                      <false/>
                  </dict>
              </array>
          </dict>
          </plist>
          EOF

          # Verify the app bundle structure
          echo "Verifying app bundle structure:"
          ls -la "Inferno.app/Contents/"
          ls -la "Inferno.app/Contents/Resources/"

          # Verify Info.plist has the icon reference
          echo "Verifying CFBundleIconFile in Info.plist:"
          /usr/libexec/PlistBuddy -c "Print :CFBundleIconFile" "Inferno.app/Contents/Info.plist"

      - name: Install create-dmg
        run: |
          brew install create-dmg

      - name: Create DMG
        run: |
          # Create directory for DMG contents
          mkdir -p dmg-contents

          # Copy app bundle
          cp -R "Inferno.app" dmg-contents/

          # Create symlink to Applications folder
          ln -s /Applications dmg-contents/Applications

          # Create DMG with icon support
          if [ -f "icons/icon.icns" ]; then
            echo "Creating DMG with custom volume icon..."
            create-dmg \
              --volname "Inferno ${{ steps.get_tag.outputs.tag }}" \
              --volicon "icons/icon.icns" \
              --window-pos 200 120 \
              --window-size 800 450 \
              --icon-size 100 \
              --icon "Inferno.app" 200 190 \
              --hide-extension "Inferno.app" \
              --app-drop-link 600 185 \
              --format UDZO \
              --hdiutil-quiet \
              "inferno-universal-${{ steps.get_tag.outputs.tag }}.dmg" \
              "dmg-contents/"
          else
            echo "WARNING: Creating DMG without custom volume icon (icon.icns not found)"
            create-dmg \
              --volname "Inferno ${{ steps.get_tag.outputs.tag }}" \
              --window-pos 200 120 \
              --window-size 800 450 \
              --icon-size 100 \
              --icon "Inferno.app" 200 190 \
              --hide-extension "Inferno.app" \
              --app-drop-link 600 185 \
              --format UDZO \
              --hdiutil-quiet \
              "inferno-universal-${{ steps.get_tag.outputs.tag }}.dmg" \
              "dmg-contents/"
          fi

      - name: Verify DMG
        run: |
          # Verify the DMG was created successfully
          ls -la *.dmg
          file "inferno-universal-${{ steps.get_tag.outputs.tag }}.dmg"

          # Test mounting the DMG
          hdiutil attach "inferno-universal-${{ steps.get_tag.outputs.tag }}.dmg" -readonly -mountpoint /tmp/inferno_test
          ls -la /tmp/inferno_test/
          /tmp/inferno_test/Inferno.app/Contents/MacOS/inferno --version || true
          hdiutil detach /tmp/inferno_test

      - name: Upload DMG to release
        if: github.event_name == 'release'
        run: |
          DMG_FILE="inferno-universal-${{ steps.get_tag.outputs.tag }}.dmg"

          echo "Uploading DMG to release..."
          gh release upload ${{ steps.get_tag.outputs.tag }} \
            "${DMG_FILE}" \
            --clobber

          echo "DMG successfully uploaded to release!"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Upload DMG as artifact (workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: inferno-dmg-${{ steps.get_tag.outputs.tag }}
          path: ./inferno-universal-${{ steps.get_tag.outputs.tag }}.dmg
          retention-days: 30

