name: Enhanced CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  INFERNO_LOG_LEVEL: info

jobs:
  # Fast checks that run first to provide quick feedback
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      rust-version: ${{ steps.rust-version.outputs.version }}
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Output Rust version
      id: rust-version
      run: echo "version=$(rustc --version)" >> $GITHUB_OUTPUT

    - name: Generate cache key
      id: cache-key
      run: echo "key=${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}" >> $GITHUB_OUTPUT

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Check workspace consistency
      run: |
        cargo check --workspace --all-targets --all-features
        cargo tree --duplicates || true

  # Security and license compliance checks
  security-audit:
    name: Security & Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quick-checks

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ needs.quick-checks.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install security tools
      run: |
        cargo install cargo-audit --locked
        cargo install cargo-deny --locked
        cargo install cargo-license --locked

    - name: Run security audit
      run: cargo audit

    - name: Check dependencies with cargo-deny
      run: cargo deny check

    - name: Check licenses
      run: cargo license --json > licenses.json

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.json
        retention-days: 30

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Code quality analysis
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quick-checks

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ needs.quick-checks.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Run Clippy with strict linting
      run: |
        cargo clippy --workspace --all-targets --all-features -- \
          -D warnings \
          -D clippy::all \
          -D clippy::pedantic \
          -D clippy::nursery \
          -D clippy::cargo \
          -A clippy::multiple_crate_versions \
          -A clippy::missing_docs_in_private_items

    - name: Check documentation
      run: |
        cargo doc --workspace --all-features --no-deps --document-private-items

    - name: Run dead code analysis
      run: cargo check --workspace --all-features
      env:
        RUSTFLAGS: "-D dead_code"

  # Comprehensive test suite across platforms and Rust versions
  test-suite:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: quick-checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: 1.70.0  # MSRV
        exclude:
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ matrix.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.rust }}-cargo-
          ${{ matrix.os }}-cargo-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pkg-config \
          libssl-dev \
          libasound2-dev \
          libfreetype6-dev \
          libexpat1-dev \
          libxcb-composite0-dev \
          libfontconfig1-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config

    - name: Build workspace
      run: cargo build --workspace --all-features --verbose

    - name: Run unit tests
      run: cargo test --workspace --all-features --verbose
      env:
        RUST_BACKTRACE: 1

    - name: Run integration tests
      run: cargo test --test integration_tests --all-features
      env:
        RUST_BACKTRACE: 1

    - name: Run component tests
      run: cargo test --test component_unit_tests --all-features
      env:
        RUST_BACKTRACE: 1

    - name: Run feature integration tests
      run: cargo test --test feature_integration_tests --all-features
      env:
        RUST_BACKTRACE: 1

    - name: Run doctests
      run: cargo test --doc --workspace --all-features

    - name: Test with minimal features
      if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
      run: |
        cargo test --no-default-features
        cargo test --no-default-features --features gpu-metal

  # Code coverage analysis
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quick-checks

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ needs.quick-checks.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin --locked

    - name: Generate code coverage
      run: |
        cargo tarpaulin \
          --verbose \
          --all-features \
          --workspace \
          --timeout 300 \
          --out xml \
          --output-dir coverage \
          --exclude-files target/* \
          --exclude-files tests/* \
          --exclude-files benches/*

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Check coverage threshold
      run: |
        python3 -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('./coverage/cobertura.xml')
        coverage = float(tree.getroot().attrib['line-rate']) * 100
        print(f'Coverage: {coverage:.2f}%')
        if coverage < 80:
            print(f'Coverage {coverage:.2f}% is below minimum threshold of 80%')
            exit(1)
        else:
            print(f'Coverage {coverage:.2f}% meets minimum threshold')
        "

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: coverage/
        retention-days: 30

  # Performance benchmarks with regression detection
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: quick-checks
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: performance-${{ needs.quick-checks.outputs.cache-key }}
        restore-keys: |
          performance-${{ runner.os }}-cargo-
          ${{ runner.os }}-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Install benchmarking tools
      run: |
        cargo install cargo-criterion --locked

    - name: Run performance benchmarks
      run: |
        mkdir -p benchmark-results
        cargo bench --bench inference_benchmark -- --output-format json > benchmark-results/current.json

    - name: Download baseline benchmark
      continue-on-error: true
      run: |
        # Download baseline from main branch artifact store
        echo "Would download baseline benchmark from main branch"
        # This would integrate with artifact storage in production

    - name: Compare performance
      run: |
        # Simplified performance comparison
        echo "Performance comparison would run here"
        echo "In production, this would compare against baseline and fail if regression > 10%"

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.sha }}
        path: benchmark-results/
        retention-days: 30

  # Build verification for all target platforms
  build-verification:
    name: Build Verification
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    needs: [security-audit, code-quality]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: build-${{ matrix.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          build-${{ matrix.os }}-${{ matrix.target }}-
          build-${{ matrix.os }}-

    - name: Install cross-compilation tools
      if: matrix.target != 'x86_64-unknown-linux-gnu' && matrix.target != 'x86_64-pc-windows-msvc' && matrix.target != 'x86_64-apple-darwin'
      run: cargo install cross --locked

    - name: Build for target
      run: |
        if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" || "${{ matrix.target }}" == "x86_64-pc-windows-msvc" || "${{ matrix.target }}" == "x86_64-apple-darwin" ]]; then
          cargo build --release --target ${{ matrix.target }} --all-features
        else
          cross build --release --target ${{ matrix.target }} --all-features
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: inferno-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/inferno*
        retention-days: 7

  # Integration verification
  integration-verification:
    name: Integration Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test-suite]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: integration-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Build release binary
      run: cargo build --release --all-features

    - name: Run end-to-end tests
      run: cargo test --test end_to_end_tests --release --all-features
      env:
        INFERNO_LOG_LEVEL: debug

    - name: Test CLI functionality
      run: |
        ./target/release/inferno --help
        ./target/release/inferno --version
        ./target/release/inferno models list || echo "No models directory configured"

    - name: Validate configuration
      run: |
        mkdir -p test_config
        ./target/release/inferno config show > test_config/current.toml
        ./target/release/inferno config validate

  # Final quality gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [security-audit, code-quality, test-suite, coverage, build-verification, integration-verification]
    if: always()

    steps:
    - name: Check all required jobs
      run: |
        echo "Security Audit: ${{ needs.security-audit.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Test Suite: ${{ needs.test-suite.result }}"
        echo "Coverage: ${{ needs.coverage.result }}"
        echo "Build Verification: ${{ needs.build-verification.result }}"
        echo "Integration Verification: ${{ needs.integration-verification.result }}"

        if [[ "${{ needs.security-audit.result }}" != "success" || \
              "${{ needs.code-quality.result }}" != "success" || \
              "${{ needs.test-suite.result }}" != "success" || \
              "${{ needs.coverage.result }}" != "success" || \
              "${{ needs.build-verification.result }}" != "success" || \
              "${{ needs.integration-verification.result }}" != "success" ]]; then
          echo "Quality gate failed - one or more required checks did not pass"
          exit 1
        fi

        echo "All quality checks passed! ✅"

    - name: Post success notification
      if: success() && github.event_name == 'pull_request'
      run: |
        echo "CI pipeline completed successfully"
        echo "All quality gates passed - PR is ready for review"

    - name: Post failure notification
      if: failure()
      run: |
        echo "CI pipeline failed - please review the failing checks"
        echo "Check the individual job logs for detailed error information"